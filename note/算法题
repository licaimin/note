给定二叉树和一个数sum，如果从树的根开始到叶节点的值等于sum，则返回true。 如果没有找到这样的路径，则返回false。



例如， 
在上述树根到叶节点存在具有以下和。

21 - > 10 - 8 - 3 
23 - > 10 - 8 - 5 
14 - > 10 - 2 - 2

因此，返回的值应该只对数字21，23和14. true。对于任何其他数字，返回值应该为false。

```
 boolean haspathSum(Node node, int sum) 
    {
        if (node == null)
            return (sum == 0);
        else
        {
            boolean ans = false;

            /* otherwise check both subtrees */
            int subsum = sum - node.data;
            if (subsum == 0 && node.left == null && node.right == null)
                return true;
            if (node.left != null)
                ans = ans || haspathSum(node.left, subsum);
            if (node.right != null)
                ans = ans || haspathSum(node.right, subsum);
            return ans;
        }
    }

```

## 2，解维

```
let time = 0
function flat(arr) {
  if (arr.length === 0 || !Array.isArray(arr)) return;
  let containsArray = false;
  let flag = 0
  for (let i = flag; i < arr.length; i++) {
    if (Array.isArray(arr[i])) {
      containsArray = true;
      let before = arr.slice(0, i);
      let after = arr.slice(i + 1);
			arr = before.concat(arr[i]).concat(after)
			flag = i
    }
	}
	
  return containsArray ? flat(arr) : arr;
}

console.log(flat([[[[1],2]] ,[2,4],3]))
//生成深度测试数组 用于验证爆栈
let testArray = Array(100000).fill().map((d, i) => ([i])).reduce((acc, cur) => {
    cur[1] = acc;
    return cur;
```

