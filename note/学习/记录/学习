# 20190718

### 反转链表

#### 递归

时间复杂度：O(n)，假设 nn 是列表的长度，那么时间复杂度为 O(n)
空间复杂度：O(n)，由于使用递归，将会使用隐式栈空间。递归深度可能会达到 n 层。。

```
/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var reverseList = function(head) {
    if(head === null || head.next === null){
        return head
    }
    let p = reverseList(head.next)
    head.next.next = head
    head.next = null
    return p
};
```



#### 迭代

- 时间复杂度：O(n)，假设 n*n* 是列表的长度，时间复杂度是 O(n)。
- 空间复杂度：O(1)。

````
/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var reverseList = function(head) {
    let curr = head
    let result = null
    while(curr !== null){
        let temp = curr.next
        curr.next = result
        result = curr
        curr = temp
    }
    return result
};
````

注意里面代码是 rersult = curr

不是result.next = curr

# 20190717

### 替换空格

题目描述
请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。

1. 剑指OFFER 双指针替换法（感觉对JS来说并不方便，因为string是基本数据类型）
2. 逐位判断插入到新字符串变量
3. 正则替换

 正则替换

 题目说的不太严谨：

1.能不能允许连续出现多个空格？
2.若有可能连续多个空格，用多个还是单个20%进行替换？
分三种情况解答

```
1.不会出现连续多个空格：
直接用空格将字符串切割成数组，在用20%进行连接。
function replaceSpace(str)
{
return str.split(‘ ‘).join(‘%20′);
}
2.允许出现多个空格，每个空格均用一个20%替换：
用正则表达式找到所有空格依次替换
function replaceSpace(str)
{
return str.replace(/\s/g,’%20′);
}
3.允许出现多个空格，多个空格用一个20%替换：用正则表达式找到连续空格进行替换
function replaceSpace(str)
{
return str.replace(/\s+/g,’%20’);
}
```

逐位判断插入到新字符串变量

```
let replace = function(string){
    let result = ''
  for(let key in string){
    // console.log(string[key])
    if(string[key] === ' '){
       result += '%20'
    }else{
        result += string[key]
    }
  }
  return result
}
console.log(replace('we are  sss'))
```

不能直接是string[key] = '%20' 因为是基本类型

# 2019-07-16

### 二维数组的查找

编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：

每行中的整数从左到右按升序排列。
每行的第一个整数大于前一行的最后一个整数。
示例 1:

输入:

```
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
输出: true
示例 2:

输入:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
输出: false
```

#### 剑指offer的解法

通常情况下在一个矩阵中搜索一个元素时间复杂度是O(m*n)的，但是在这里只用O(m+n)的时间复杂度就能完成，说一下思路
以右上角为起点，如果当前的值小于我要寻找的值，就往下移动，如果当前的值大于我要寻找的值，就往左移动

```
 if(matrix.length == 0)
        return false;
    let row = 0;
    let col =  matrix[0].length - 1;
    while (row < matrix.length && col >= 0) {
        let n = matrix[row][col]
        if (n==target){
            return true;
        }else if(n >target){
            col--;
        }else{
            row++;
        }
    }
    return false;
```

#### 二分查找法

```
var searchMatrix = function(matrix, target) {
     if(matrix == null || matrix.length == 0) return false;
    let columns = matrix[0].length
    let rows = matrix.length
    let left = 0
    let right = columns * rows -1
    while(left <= right){
    let mid =Math.floor( left + (right-left)/2)
            let row = Math.floor(mid/columns)
            let column = Math.floor(mid% columns)

        if(matrix[row][column] > target){
            right = mid -1
        }else if(matrix[row][column] < target){
            left = mid +1
        }else if(matrix[row][column] ===target){
            return true
        }
    }
   return false 
}
x
```

一句话解释: 二维数组转一维,用二分法

详细解释,

二维变成一维,就是按照二维数组顺序,依次变成一维数列,所以有如果一个数在一维坐标位置是loc,那么它在二维坐标就是[loc/col][loc%col]

时间复杂度：O(log(mn))=O(log(m)+log(n))

